SecurityContextPersistenceFilter.doFilter
  -->OncePerRequestFilter.doFilter
    -->HeaderWriterFilter.doFilterInternal
      -->LogoutFilter.doFilter
        -->OncePerRequestFilter.doFilter
----------------------------------------------------------------------BasicAuthenticationFilter--------------------------------------------------------------------------------------------
          -->BasicAuthenticationFilter.doFilterInternal
            -->request.getHeader("Authorization");  //获取 Headers中的 Authorization
            -->extractAndDecodeHeader(header, request);  //对 Header中的 Authorization 进行Base64解码拿到 client_id和client_secret
            -->new UsernamePasswordAuthenticationToken(username, tokens[1]);
              -->new UsernamePasswordAuthenticationToken
                -->new AbstractAuthenticationToken()  // 初始化 authenticated = false
                  -->setAuthenticated(false);  //标记 authenticated = false
              -->UsernamePasswordAuthenticationToken.setDetails(this.authenticationDetailsSource.buildDetails(request));
                -->WebAuthenticationDetailsSource.buildDetails
                  -->new WebAuthenticationDetails(context);
                -->this.authenticationManager.authenticate(authRequest);
                  -->ProviderManager.authenticate
                    -->provider.authenticate(authentication);  //provider: DaoAuthenticationProvider
                      -->AbstractUserDetailsAuthenticationProvider.authenticate
                        -->this.userCache.getUserFromCache(username);
                        -->retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);
                          -->DaoAuthenticationProvider.retrieveUser
                            --> this.getUserDetailsService().loadUserByUsername(username); // 获取client信息
                            -->return new User(username, clientSecret, clientDetails.getAuthorities()); // 返回UserDetails对象
                        -->preAuthenticationChecks.check(user);  // 检查user的 accountNonExpired accountNonLocked enabled字段
                        -->additionalAuthenticationChecks(user,(UsernamePasswordAuthenticationToken) authentication);
                          -->DaoAuthenticationProvider.additionalAuthenticationChecks   // 检查 client 的密码是否匹配
                          -->postAuthenticationChecks.check(user);
                            -->DefaultPostAuthenticationChecks.check(UserDetails)   //检查 ClientDetailsService的isCredentialsNonExpired
                          -->this.userCache.putUserInCache(user);  //将UserDetails放入缓存
                          -->return createSuccessAuthentication(principalToReturn, authentication, user);
                            -->AbstractUserDetailsAuthenticationProvider.createSuccessAuthentication
                              -->new UsernamePasswordAuthenticationToken(principal, authentication.getCredentials(),authoritiesMapper.mapAuthorities(user.getAuthorities()));
                                -->UsernamePasswordAuthenticationToken
                                  --> super(authorities);
                                    -->AbstractAuthenticationToken
                                      -->super.setAuthenticated(true); // 标识授权通过
                              -->result.setDetails(authentication.getDetails());
                              --> return result;
                    -->copyDetails(authentication, result);
                      -->ProviderManager.copyDetails //do nothing
                      -->((CredentialsContainer) result).eraseCredentials();  //擦除密码信息
            -->SecurityContextHolder.getContext().setAuthentication(authResult);
            -->this.rememberMeServices.loginSuccess(request, response, authResult);
            -->onSuccessfulAuthentication(request, response, authResult);

........

----------------------------------------------------------------------TokenEndpoint--------------------------------------------------------------------------------------------
TokenEndpoint.postAccessToken
  -->getClientId(principal);  //获取 `Headers` 中的clientId
  -->getClientDetailsService().loadClientByClientId(clientId); //获取 `ClientDetails` 信息
  -->getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);
    -->DefaultOAuth2RequestFactory.createTokenRequest
      -->new TokenRequest(requestParameters, clientId, scopes, grantType);
      -->return tokenRequest
    -->oAuth2RequestValidator.validateScope(tokenRequest, authenticatedClient);  //校验 `scope` 合法性
    -->getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);
      -->AuthorizationServerEndpointsConfigurer.getDefaultTokenGranters()  //初始化默认tokenGranters
        -->tokenGranters.add(new AuthorizationCodeTokenGranter(tokenServices, authorizationCodeServices, clientDetails,requestFactory));
        -->tokenGranters.add(new RefreshTokenGranter(tokenServices, clientDetails, requestFactory));
        -->tokenGranters.add(new ImplicitTokenGranter(tokenServices, clientDetails, requestFactory));
        -->tokenGranters.add(new ClientCredentialsTokenGranter(tokenServices, clientDetails, requestFactory));
        -->tokenGranters.add(new ResourceOwnerPasswordTokenGranter(authenticationManager, tokenServices,clientDetails, requestFactory));
      -->CompositeTokenGranter.grant(String grantType, TokenRequest tokenRequest)
        -->AbstractTokenGranter.grant
        -->getAccessToken(client, tokenRequest);
          -->tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));
            -->ResourceOwnerPasswordTokenGranter.getOAuth2Authentication(ClientDetails client, TokenRequest tokenRequest)
              -->userAuth = new UsernamePasswordAuthenticationToken(username, password);
              -->authenticationManager.authenticate(userAuth);
                -->WebSecurityConfigurerAdapter.authenticate(Authentication authentication)
                  -->ProviderManager.authenticate(Authentication authentication)
                    -->provider.authenticate(authentication);
                      -->AbstractUserDetailsAuthenticationProvider.authenticate(Authentication authenticateication); //查询 User
                        -->preAuthenticationChecks.check(user); //检查用户账户权限（是否过期， 是否可用。。）
                        -->additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);//检查用户密码
                        -->createSuccessAuthentication(principalToReturn, authentication, user);
----------------------------------------------------------------------------AbstractUserDetailsAuthenticationProvider----------------------------------------------------------------------------------------------------------------------
                          -->new UsernamePasswordAuthenticationToken(principal, authentication.getCredentials(),authoritiesMapper.mapAuthorities(user.getAuthorities()));
              -->getRequestFactory().createOAuth2Request(client, tokenRequest);
                -->TokenRequest.createOAuth2Request(ClientDetails client)
                  -->new OAuth2Request(modifiable, client.getClientId(), client.getAuthorities(), true, this.getScope(), client.getResourceIds(), null, null, null);  //设置BaseRequest参数
              -->new OAuth2Authentication(storedOAuth2Request, userAuth);






DefaultTokenServices.createAccessToken
  -->tokenStore.getAccessToken(authentication);  //判断token是否存在
    -->RedisTokenStore.getAccessToken
      -->authenticationKeyGenerator.extractKey(authentication);  //对用户名授权方式和scope进行md5加密
      -->getConnection();   //获取Redis链接
  -->createRefreshToken(authentication);
    -->createRefreshToken(OAuth2Authentication authentication)   //创建refreshToken
    -->createAccessToken(authentication, refreshToken);
      -->new DefaultOAuth2AccessToken(UUID.randomUUID().toString()); //创建token
      -->getAccessTokenValiditySeconds(authentication.getOAuth2Request()); //获取系统设置的validitySeconds
      -->return accessTokenEnhancer != null ? accessTokenEnhancer.enhance(token, authentication) : token;
    -->tokenStore.storeAccessToken(accessToken, authentication);
      -->RedisTokenStore.storeAccessToken() //将Token信息存入Redis
    -->tokenStore.storeRefreshToken(refreshToken, authentication); //存储RefreshToken
